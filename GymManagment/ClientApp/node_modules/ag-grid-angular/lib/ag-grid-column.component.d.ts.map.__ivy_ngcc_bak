{"version":3,"file":"ag-grid-column.component.d.ts","sources":["ag-grid-column.component.d.ts"],"names":[],"mappingssourcesContent":["import { CellClassFunc, CellClassRules, CellClickedEvent, CellContextMenuEvent, CellDoubleClickedEvent, CellEditorSelectorFunc, CellRendererSelectorFunc, CellStyle, CellStyleFunc, CheckboxSelectionCallback, ColDef, ColGroupDef, ColSpanParams, ColumnsMenuParams, DndSourceCallback, DndSourceOnRowDragParams, EditableCallback, GetQuickFilterTextParams, HeaderCheckboxSelectionCallback, HeaderClass, HeaderValueGetterFunc, IAggFunc, ICellRendererComp, ICellRendererFunc, IRowDragItem, ITooltipParams, KeyCreatorParams, NewValueParams, RowDragCallback, RowNode, RowSpanParams, SuppressHeaderKeyboardEventParams, SuppressKeyboardEventParams, SuppressNavigableCallback, SuppressPasteCallback, ToolPanelClass, ValueFormatterFunc, ValueGetterFunc, ValueParserFunc, ValueSetterFunc } from \"ag-grid-community\";\r\nimport { QueryList } from \"@angular/core\";\r\nexport declare class AgGridColumn {\r\n    childColumns: QueryList<AgGridColumn>;\r\n    hasChildColumns(): boolean;\r\n    toColDef(): ColDef;\r\n    private getChildColDefs;\r\n    private createColDefFromGridColumn;\r\n    filterFramework: any;\r\n    filterParams: any;\r\n    floatingFilterComponent: any;\r\n    floatingFilterComponentParams: any;\r\n    floatingFilterComponentFramework: any;\r\n    floatingFilterFramework: any;\r\n    filter: any;\r\n    /** The name to render in the column header. If not specified and field is specified, the field name will be used as the header name.     */\r\n    headerName: string | undefined;\r\n    /** Function or expression. Gets the value for display in the header.     */\r\n    headerValueGetter: string | HeaderValueGetterFunc | undefined;\r\n    /** Tooltip for the column header     */\r\n    headerTooltip: string | undefined;\r\n    /** CSS class to use for the header cell. Can be a string, array of strings, or function.     */\r\n    headerClass: HeaderClass | undefined;\r\n    /** Suppress the grid taking action for the relevant keyboard event when a header is focused.     */\r\n    suppressHeaderKeyboardEvent: ((params: SuppressHeaderKeyboardEventParams) => boolean) | undefined;\r\n    /** Whether to show the column when the group is open / closed.     */\r\n    columnGroupShow: string | undefined;\r\n    /** CSS class to use for the tool panel cell. Can be a string, array of strings, or function.     */\r\n    toolPanelClass: ToolPanelClass | undefined;\r\n    /** Set to `true` if you do not want this column or group to appear in the Columns Tool Panel. Default: `false`     */\r\n    suppressColumnsToolPanel: boolean | undefined;\r\n    /** Set to `true` if you do not want this column (filter) or group (filter group) to appear in the Filters Tool Panel. Default: `false`     */\r\n    suppressFiltersToolPanel: boolean | undefined;\r\n    /** Provide your own tooltip component for the column.\r\n     * See [Tooltip Component](https://www.ag-grid.com/javascript-data-grid/component-tooltip/) for framework specific implementation details.     */\r\n    tooltipComponent: any;\r\n    /** @deprecated As of v27, use `tooltipComponent` for framework components too.\r\n     */\r\n    tooltipComponentFramework: any;\r\n    /** The params used to configure `tooltipComponent`.     */\r\n    tooltipComponentParams: any;\r\n    /** A list containing a mix of columns and column groups.     */\r\n    children: (ColDef | ColGroupDef)[] | undefined;\r\n    /** The unique ID to give the column. This is optional. If missing, a unique ID will be generated. This ID is used to identify the column group in the column API.     */\r\n    groupId: string | undefined;\r\n    /** Set to `true` if this group should be opened by default. Default: `false`     */\r\n    openByDefault: boolean | undefined;\r\n    /** Set to `true` to keep columns in this group beside each other in the grid. Moving the columns outside of the group (and hence breaking the group) is not allowed. Default: `false`     */\r\n    marryChildren: boolean | undefined;\r\n    /** The custom header group component to be used for rendering the component header. If none specified the default AG Grid is used.\r\n     * See [Header Group Component](https://www.ag-grid.com/javascript-data-grid/component-header/#header-group-components/) for framework specific implementation details.     */\r\n    headerGroupComponent: any;\r\n    /** @deprecated As of v27, use `headerGroupComponent` for framework components too.\r\n     */\r\n    headerGroupComponentFramework: any;\r\n    /** The params used to configure the `headerGroupComponent`.     */\r\n    headerGroupComponentParams: any;\r\n    /** The unique ID to give the column. This is optional. If missing, the ID will default to the field.\r\n     * If both field and colId are missing, a unique ID will be generated.\r\n     * This ID is used to identify the column in the API for sorting, filtering etc.     */\r\n    colId: string | undefined;\r\n    /** The field of the row to get the cells data from     */\r\n    field: string | undefined;\r\n    /** A comma separated string or array of strings containing `ColumnType` keys which can be used as a template for a column.\r\n     * This helps to reduce duplication of properties when you have a lot of common column properties.     */\r\n    type: string | string[] | undefined;\r\n    /** Function or expression. Gets the value from your data for display.     */\r\n    valueGetter: string | ValueGetterFunc | undefined;\r\n    /** A function or expression to format a value, should return a string. Not used for CSV export or copy to clipboard, only for UI cell rendering.     */\r\n    valueFormatter: string | ValueFormatterFunc | undefined;\r\n    /** Provided a reference data map to be used to map column values to their respective value from the map.     */\r\n    refData: {\r\n        [key: string]: string;\r\n    } | undefined;\r\n    /** Function to return a string key for a value.\r\n     * This string is used for grouping, Set filtering, and searching within cell editor dropdowns.\r\n     * When filtering and searching the string is exposed to the user, so make sure to return a human-readable value.     */\r\n    keyCreator: ((params: KeyCreatorParams) => string) | undefined;\r\n    /** Custom comparator for values, used by renderer to know if values have changed. Cells who's values have not changed don't get refreshed.\r\n     * By default the grid uses `===` is used which should work for most use cases.     */\r\n    equals: ((valueA: any, valueB: any) => boolean) | undefined;\r\n    /** The field of the tooltip to apply to the cell.     */\r\n    tooltipField: string | undefined;\r\n    /** Callback that should return the string to use for a tooltip, `tooltipField` takes precedence if set.\r\n     * If using a custom `tooltipComponent` you may return any custom value to be passed to your tooltip component.     */\r\n    tooltipValueGetter: ((params: ITooltipParams) => string | any) | undefined;\r\n    /** `boolean` or `Function`. Set to `true` (or return `true` from function) to render a selection checkbox in the column. Default: `false`     */\r\n    checkboxSelection: boolean | CheckboxSelectionCallback | undefined;\r\n    /** Icons to use inside the column instead of the grid's default icons. Leave undefined to use defaults.     */\r\n    icons: {\r\n        [key: string]: Function | string;\r\n    } | undefined;\r\n    /** Set to `true` if this column is not navigable (i.e. cannot be tabbed into), otherwise `false`.\r\n     * Can also be a callback function to have different rows navigable.\r\n     * Default: `false`     */\r\n    suppressNavigable: boolean | SuppressNavigableCallback | undefined;\r\n    /** Allows the user to suppress certain keyboard events in the grid cell. Default: `false`     */\r\n    suppressKeyboardEvent: ((params: SuppressKeyboardEventParams) => boolean) | undefined;\r\n    /** Pasting is on by default as long as cells are editable (non-editable cells cannot be modified, even with a paste operation).\r\n     * Set to `true` turn paste operations off.     */\r\n    suppressPaste: boolean | SuppressPasteCallback | undefined;\r\n    /** Set to true to prevent the fillHandle from being rendered in any cell that belongs to this column     */\r\n    suppressFillHandle: boolean | undefined;\r\n    /** Set to `true` for this column to be hidden. Default: `false`     */\r\n    hide: boolean | undefined;\r\n    /** Same as `hide`, except only applied when creating a new column. Not applied when updating column definitions.     */\r\n    initialHide: boolean | undefined;\r\n    /** Set to `true` to block making column visible / hidden via the UI (API will still work). Default: `false`     */\r\n    lockVisible: boolean | undefined;\r\n    /** Set to `true` to always have this column displayed first. Default: `false`     */\r\n    lockPosition: boolean | undefined;\r\n    /** Set to `true` if you do not want this column to be movable via dragging. Default: `false`     */\r\n    suppressMovable: boolean | undefined;\r\n    /** Set to `true` if this column is editable, otherwise `false`. Can also be a function to have different rows editable. Default: `false`     */\r\n    editable: boolean | EditableCallback | undefined;\r\n    /** Function or expression. Sets the value into your data for saving. Return `true` if the data changed.     */\r\n    valueSetter: string | ValueSetterFunc | undefined;\r\n    /** Function or expression. Parses the value for saving.     */\r\n    valueParser: string | ValueParserFunc | undefined;\r\n    /** Provide your own cell editor component for this column's cells.\r\n     * See [Cell Editor](https://www.ag-grid.com/javascript-data-grid/component-cell-editor/) for framework specific implementation detail.     */\r\n    cellEditor: any;\r\n    /** @deprecated As of v27, use `cellEditor` for framework components too.\r\n     */\r\n    cellEditorFramework: any;\r\n    /** Params to be passed to the `cellEditor` component.     */\r\n    cellEditorParams: any;\r\n    /** Callback to select which cell editor to be used for a given row within the same column.     */\r\n    cellEditorSelector: CellEditorSelectorFunc | undefined;\r\n    /** Set to `true` to have cells under this column enter edit mode after single click. Default: `false`     */\r\n    singleClickEdit: boolean | undefined;\r\n    /** @deprecated use `valueSetter` instead\r\n     */\r\n    newValueHandler: ((params: NewValueParams) => boolean) | undefined;\r\n    /** Set to `true`, to have the cell editor appear in a popup.     */\r\n    cellEditorPopup: boolean | undefined;\r\n    /** Set the position for the popup cell editor. Possible values are\r\n     *   - `over` Popup will be positioned over the cell\r\n     *   - `under` Popup will be positioned below the cell leaving the cell value visible.\r\n     *\r\n     * Default: `over`.     */\r\n    cellEditorPopupPosition: string | undefined;\r\n    /** Callback for after the value of a cell has changed, either due to editing or the application calling `api.setValue()`.     */\r\n    onCellValueChanged: ((event: NewValueParams) => void) | undefined;\r\n    /** Callback called when a cell is clicked.     */\r\n    onCellClicked: ((event: CellClickedEvent) => void) | undefined;\r\n    /** Callback called when a cell is double clicked.     */\r\n    onCellDoubleClicked: ((event: CellDoubleClickedEvent) => void) | undefined;\r\n    /** Callback called when a cell is right clicked.     */\r\n    onCellContextMenu: ((event: CellContextMenuEvent) => void) | undefined;\r\n    /** A function to tell the grid what quick filter text to use for this column if you don't want to use the default (which is calling `toString` on the value).     */\r\n    getQuickFilterText: ((params: GetQuickFilterTextParams) => string) | undefined;\r\n    /** Function or expression. Gets the value for filtering purposes.     */\r\n    filterValueGetter: string | ValueGetterFunc | undefined;\r\n    /** Whether to display a floating filter for this column. Default: `false`     */\r\n    floatingFilter: boolean | undefined;\r\n    /**     */\r\n    /** The custom header component to be used for rendering the component header. If none specified the default AG Grid header component is used.\r\n         * See [Header Component](https://www.ag-grid.com/javascript-data-grid/component-header/) for framework specific implementation detail.     */\r\n    headerComponent: any;\r\n    /** @deprecated As of v27, use `headerComponent` for framework components too.\r\n     */\r\n    headerComponentFramework: any;\r\n    /** The parameters to be passed to the `headerComponent`.     */\r\n    headerComponentParams: any;\r\n    /** Set to an array containing zero, one or many of the following options: `'filterMenuTab' | 'generalMenuTab' | 'columnsMenuTab'`.\r\n     * This is used to figure out which menu tabs are present and in which order the tabs are shown.     */\r\n    menuTabs: string[] | undefined;\r\n    /** Params used to change the behaviour and appearance of the Columns Menu tab.     */\r\n    columnsMenuParams: ColumnsMenuParams | undefined;\r\n    /** Set to `true` if no menu should be shown for this column header. Default: `false`     */\r\n    suppressMenu: boolean | undefined;\r\n    /** If `true` or the callback returns `true`, a 'select all' checkbox will be put into the header.     */\r\n    headerCheckboxSelection: boolean | HeaderCheckboxSelectionCallback | undefined;\r\n    /** If `true`, the header checkbox selection will only select filtered items.     */\r\n    headerCheckboxSelectionFilteredOnly: boolean | undefined;\r\n    /** Defines the chart data type that should be used for a column.     */\r\n    chartDataType: 'category' | 'series' | 'time' | 'excluded' | undefined;\r\n    /** Pin a column to one side: `right` or `left`. A value of `true` is converted to `'left'`.     */\r\n    pinned: boolean | string | null | undefined;\r\n    /** Same as `pinned`, except only applied when creating a new column. Not applied when updating column definitions.     */\r\n    initialPinned: boolean | string | undefined;\r\n    /** Set to true to block the user pinning the column, the column can only be pinned via definitions or API. Default: `false`     */\r\n    lockPinned: boolean | undefined;\r\n    /** @deprecated Use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned.\r\n     */\r\n    pinnedRowCellRenderer: {\r\n        new (): ICellRendererComp;\r\n    } | ICellRendererFunc | string | undefined;\r\n    /** @deprecated Use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned.\r\n     */\r\n    pinnedRowCellRendererFramework: any;\r\n    /** @deprecated Use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned.\r\n     */\r\n    pinnedRowCellRendererParams: any;\r\n    /** @deprecated Use valueFormatter for pinned rows, and check params.node.rowPinned.\r\n     */\r\n    pinnedRowValueFormatter: string | ValueFormatterFunc | undefined;\r\n    /** Set to true to pivot by this column.     */\r\n    pivot: boolean | undefined;\r\n    /** Same as `pivot`, except only applied when creating a new column. Not applied when updating column definitions.     */\r\n    initialPivot: boolean | undefined;\r\n    /** Set this in columns you want to pivot by.\r\n     * If only pivoting by one column, set this to any number (e.g. `0`).\r\n     * If pivoting by multiple columns, set this to where you want this column to be in the order of pivots (e.g. `0` for first, `1` for second, and so on).     */\r\n    pivotIndex: number | null | undefined;\r\n    /** Same as `pivotIndex`, except only applied when creating a new column. Not applied when updating column definitions.     */\r\n    initialPivotIndex: number | undefined;\r\n    /** Comparator to use when ordering the pivot columns, when this column is used to pivot on.\r\n     * The values will always be strings, as the pivot service uses strings as keys for the pivot groups.     */\r\n    pivotComparator: ((valueA: string, valueB: string) => number) | undefined;\r\n    /** Set to `true` if you want to be able to pivot by this column via the GUI. This will not block the API or properties being used to achieve pivot. Default: `false`     */\r\n    enablePivot: boolean | undefined;\r\n    /** An object of css values / or function returning an object of css values for a particular cell.     */\r\n    cellStyle: CellStyle | CellStyleFunc | undefined;\r\n    /** Class to use for the cell. Can be string, array of strings, or function that returns a string or array of strings.     */\r\n    cellClass: string | string[] | CellClassFunc | undefined;\r\n    /** Rules which can be applied to include certain CSS classes.     */\r\n    cellClassRules: CellClassRules | undefined;\r\n    /** Provide your own cell Renderer component for this column's cells.\r\n     * See [Cell Renderer](https://www.ag-grid.com/javascript-data-grid/component-cell-renderer/) for framework specific implementation details.     */\r\n    cellRenderer: any;\r\n    /** @deprecated As of v27, use `cellRenderer` for framework components too.\r\n     */\r\n    cellRendererFramework: any;\r\n    /** Params to be passed to the `cellRenderer` component.     */\r\n    cellRendererParams: any;\r\n    /** Callback to select which cell renderer to be used for a given row within the same column.     */\r\n    cellRendererSelector: CellRendererSelectorFunc | undefined;\r\n    /** Set to `true` to have the grid calculate the height of a row based on contents of this column. Default: `false`     */\r\n    autoHeight: boolean | undefined;\r\n    /** Set to `true` to have the text wrap inside the cell - typically used with `autoHeight`. Default: `false`     */\r\n    wrapText: boolean | undefined;\r\n    /** Set to `true` to flash a cell when it's refreshed. Default: `false`     */\r\n    enableCellChangeFlash: boolean | undefined;\r\n    /** Set to `true` to prevent this column from flashing on changes. Only applicable if cell flashing is turned on for the grid. Default: `false`     */\r\n    suppressCellFlash: boolean | undefined;\r\n    /** `boolean` or `Function`. Set to `true` (or return `true` from function) to allow row dragging. Default: `false`     */\r\n    rowDrag: boolean | RowDragCallback | undefined;\r\n    /** A callback that should return a string to be displayed by the `rowDragComp` while dragging a row.\r\n     * If this callback is not set, the current cell value will be used.     */\r\n    rowDragText: ((params: IRowDragItem, dragItemCount: number) => string) | undefined;\r\n    /** `boolean` or `Function`. Set to `true` (or return `true` from function) to allow dragging for native drag and drop. Default: `false`     */\r\n    dndSource: boolean | DndSourceCallback | undefined;\r\n    /** Function to allow custom drag functionality for native drag and drop.     */\r\n    dndSourceOnRowDrag: ((params: DndSourceOnRowDragParams) => void) | undefined;\r\n    /** Set to `true` to row group by this column. Default: `false`     */\r\n    rowGroup: boolean | undefined;\r\n    /** Same as `rowGroup`, except only applied when creating a new column. Not applied when updating column definitions.     */\r\n    initialRowGroup: boolean | undefined;\r\n    /** Set this in columns you want to group by.\r\n     * If only grouping by one column, set this to any number (e.g. `0`).\r\n     * If grouping by multiple columns, set this to where you want this column to be in the group (e.g. `0` for first, `1` for second, and so on).     */\r\n    rowGroupIndex: number | null | undefined;\r\n    /** Same as `rowGroupIndex`, except only applied when creating a new column. Not applied when updating column definitions.     */\r\n    initialRowGroupIndex: number | undefined;\r\n    /** Set to `true` if you want to be able to row group by this column via the GUI.\r\n     * This will not block the API or properties being used to achieve row grouping.\r\n     * Default: `false`     */\r\n    enableRowGroup: boolean | undefined;\r\n    /** Set to `true` if you want to be able to aggregate by this column via the GUI.\r\n     * This will not block the API or properties being used to achieve aggregation.\r\n     * Default: `false`     */\r\n    enableValue: boolean | undefined;\r\n    /** Name of function to use for aggregation. You can also provide your own agg function.     */\r\n    aggFunc: string | IAggFunc | null | undefined;\r\n    /** Same as `aggFunc`, except only applied when creating a new column. Not applied when updating column definitions.     */\r\n    initialAggFunc: string | IAggFunc | undefined;\r\n    /** Aggregation functions allowed on this column e.g. `['sum', 'avg']`.\r\n     * If missing, all installed functions are allowed.\r\n     * This will only restrict what the GUI allows a user to select, it does not impact when you set a function via the API.     */\r\n    allowedAggFuncs: string[] | undefined;\r\n    /** Set to true to have the grid place the values for the group into the cell, or put the name of a grouped column to just show that group.     */\r\n    showRowGroup: string | boolean | undefined;\r\n    /** Set to `true` to allow sorting on this column. Default: `false`     */\r\n    sortable: boolean | undefined;\r\n    /** If sorting by default, set it here. Set to `asc` or `desc`.     */\r\n    sort: 'asc' | 'desc' | null | undefined;\r\n    /** Same as `sort`, except only applied when creating a new column. Not applied when updating column definitions.     */\r\n    initialSort: 'asc' | 'desc' | null | undefined;\r\n    /** If sorting more than one column by default, specifies order in which the sorting should be applied.     */\r\n    sortIndex: number | null | undefined;\r\n    /** Same as `sortIndex`, except only applied when creating a new column. Not applied when updating column definitions.     */\r\n    initialSortIndex: number | undefined;\r\n    /** Array defining the order in which sorting occurs (if sorting is enabled). An array with any of the following in any order `['asc','desc',null]`     */\r\n    sortingOrder: ('asc' | 'desc' | null)[] | undefined;\r\n    /** Comparator function for custom sorting.     */\r\n    comparator: ((valueA: any, valueB: any, nodeA: RowNode, nodeB: RowNode, isInverted: boolean) => number) | undefined;\r\n    /** Set to `true` if you want the unsorted icon to be shown when no sort is applied to this column. Default: `false`     */\r\n    unSortIcon: boolean | undefined;\r\n    /** @deprecated since v24 - use sortIndex instead\r\n     */\r\n    sortedAt: number | undefined;\r\n    /** By default, each cell will take up the width of one column. You can change this behaviour to allow cells to span multiple columns.     */\r\n    colSpan: ((params: ColSpanParams) => number) | undefined;\r\n    /** By default, each cell will take up the height of one row. You can change this behaviour to allow cells to span multiple rows.     */\r\n    rowSpan: ((params: RowSpanParams) => number) | undefined;\r\n    /** Initial width in pixels for the cell.     */\r\n    width: number | undefined;\r\n    /** Same as `width`, except only applied when creating a new column. Not applied when updating column definitions.     */\r\n    initialWidth: number | undefined;\r\n    /** Minimum width in pixels for the cell.     */\r\n    minWidth: number | undefined;\r\n    /** Maximum width in pixels for the cell.     */\r\n    maxWidth: number | undefined;\r\n    /** Used instead of `width` when the goal is to fill the remaining empty space of the grid.     */\r\n    flex: number | undefined;\r\n    /** Same as `flex`, except only applied when creating a new column. Not applied when updating column definitions.     */\r\n    initialFlex: number | undefined;\r\n    /** Set to `true` to allow this column should be resized. Default: `false`     */\r\n    resizable: boolean | undefined;\r\n    /** Set to `true` if you want this column's width to be fixed during 'size to fit' operations. Default: `false`     */\r\n    suppressSizeToFit: boolean | undefined;\r\n    /** Set to `true` if you do not want this column to be auto-resizable by double clicking it's edge. Default: `false`     */\r\n    suppressAutoSize: boolean | undefined;\r\n    static ngAcceptInputType_suppressCellFlash: boolean | null | '';\r\n    static ngAcceptInputType_suppressColumnsToolPanel: boolean | null | '';\r\n    static ngAcceptInputType_suppressFiltersToolPanel: boolean | null | '';\r\n    static ngAcceptInputType_openByDefault: boolean | null | '';\r\n    static ngAcceptInputType_marryChildren: boolean | null | '';\r\n    static ngAcceptInputType_hide: boolean | null | '';\r\n    static ngAcceptInputType_initialHide: boolean | null | '';\r\n    static ngAcceptInputType_rowGroup: boolean | null | '';\r\n    static ngAcceptInputType_initialRowGroup: boolean | null | '';\r\n    static ngAcceptInputType_pivot: boolean | null | '';\r\n    static ngAcceptInputType_initialPivot: boolean | null | '';\r\n    static ngAcceptInputType_checkboxSelection: boolean | null | '';\r\n    static ngAcceptInputType_headerCheckboxSelection: boolean | null | '';\r\n    static ngAcceptInputType_headerCheckboxSelectionFilteredOnly: boolean | null | '';\r\n    static ngAcceptInputType_suppressMenu: boolean | null | '';\r\n    static ngAcceptInputType_suppressMovable: boolean | null | '';\r\n    static ngAcceptInputType_lockPosition: boolean | null | '';\r\n    static ngAcceptInputType_lockVisible: boolean | null | '';\r\n    static ngAcceptInputType_lockPinned: boolean | null | '';\r\n    static ngAcceptInputType_unSortIcon: boolean | null | '';\r\n    static ngAcceptInputType_suppressSizeToFit: boolean | null | '';\r\n    static ngAcceptInputType_suppressAutoSize: boolean | null | '';\r\n    static ngAcceptInputType_enableRowGroup: boolean | null | '';\r\n    static ngAcceptInputType_enablePivot: boolean | null | '';\r\n    static ngAcceptInputType_enableValue: boolean | null | '';\r\n    static ngAcceptInputType_editable: boolean | null | '';\r\n    static ngAcceptInputType_suppressPaste: boolean | null | '';\r\n    static ngAcceptInputType_suppressNavigable: boolean | null | '';\r\n    static ngAcceptInputType_enableCellChangeFlash: boolean | null | '';\r\n    static ngAcceptInputType_rowDrag: boolean | null | '';\r\n    static ngAcceptInputType_dndSource: boolean | null | '';\r\n    static ngAcceptInputType_autoHeight: boolean | null | '';\r\n    static ngAcceptInputType_wrapText: boolean | null | '';\r\n    static ngAcceptInputType_sortable: boolean | null | '';\r\n    static ngAcceptInputType_resizable: boolean | null | '';\r\n    static ngAcceptInputType_singleClickEdit: boolean | null | '';\r\n    static ngAcceptInputType_floatingFilter: boolean | null | '';\r\n    static ngAcceptInputType_cellEditorPopup: boolean | null | '';\r\n    static ngAcceptInputType_suppressFillHandle: boolean | null | '';\r\n}\r\n"]}