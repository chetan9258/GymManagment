import { EventEmitter, ChangeDetectorRef } from "@angular/core";
import { ControlValueAccessor } from "@angular/forms";
import { ListItem, IDropdownSettings } from "./multiselect.model";
import { ListFilterPipe } from "./list-filter.pipe";
import * as ɵngcc0 from '@angular/core';
export declare const DROPDOWN_CONTROL_VALUE_ACCESSOR: any;
export declare class MultiSelectComponent implements ControlValueAccessor {
    private listFilterPipe;
    private cdr;
    _settings: IDropdownSettings;
    _data: Array<ListItem>;
    selectedItems: Array<ListItem>;
    isDropdownOpen: boolean;
    _placeholder: string;
    private _sourceDataType;
    private _sourceDataFields;
    filter: ListItem;
    defaultSettings: IDropdownSettings;
    placeholder: string;
    disabled: boolean;
    settings: IDropdownSettings;
    data: Array<any>;
    onFilterChange: EventEmitter<ListItem>;
    onDropDownClose: EventEmitter<ListItem>;
    onSelect: EventEmitter<ListItem>;
    onDeSelect: EventEmitter<ListItem>;
    onSelectAll: EventEmitter<Array<ListItem>>;
    onDeSelectAll: EventEmitter<Array<ListItem>>;
    private onTouchedCallback;
    private onChangeCallback;
    onFilterTextChange($event: any): void;
    constructor(listFilterPipe: ListFilterPipe, cdr: ChangeDetectorRef);
    onItemClick($event: any, item: ListItem): boolean;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    onTouched(): void;
    trackByFn(index: any, item: any): any;
    isSelected(clickedItem: ListItem): boolean;
    isLimitSelectionReached(): boolean;
    isAllItemsSelected(): boolean;
    showButton(): boolean;
    itemShowRemaining(): number;
    addSelected(item: ListItem): void;
    removeSelected(itemSel: ListItem): void;
    emittedValue(val: any): any;
    objectify(val: ListItem): {};
    private deobjectify;
    toggleDropdown(evt: any): void;
    closeDropdown(): void;
    toggleSelectAll(): boolean;
    getFields(inputData: any): any[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MultiSelectComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MultiSelectComponent, "ng-multiselect-dropdown", never, { "disabled": "disabled"; "placeholder": "placeholder"; "settings": "settings"; "data": "data"; }, { "onFilterChange": "onFilterChange"; "onDropDownClose": "onDropDownClose"; "onSelect": "onSelect"; "onDeSelect": "onDeSelect"; "onSelectAll": "onSelectAll"; "onDeSelectAll": "onDeSelectAll"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlzZWxlY3QuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm11bHRpc2VsZWN0LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XHJcbmltcG9ydCB7IExpc3RJdGVtLCBJRHJvcGRvd25TZXR0aW5ncyB9IGZyb20gXCIuL211bHRpc2VsZWN0Lm1vZGVsXCI7XHJcbmltcG9ydCB7IExpc3RGaWx0ZXJQaXBlIH0gZnJvbSBcIi4vbGlzdC1maWx0ZXIucGlwZVwiO1xyXG5leHBvcnQgZGVjbGFyZSBjb25zdCBEUk9QRE9XTl9DT05UUk9MX1ZBTFVFX0FDQ0VTU09SOiBhbnk7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE11bHRpU2VsZWN0Q29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xyXG4gICAgcHJpdmF0ZSBsaXN0RmlsdGVyUGlwZTtcclxuICAgIHByaXZhdGUgY2RyO1xyXG4gICAgX3NldHRpbmdzOiBJRHJvcGRvd25TZXR0aW5ncztcclxuICAgIF9kYXRhOiBBcnJheTxMaXN0SXRlbT47XHJcbiAgICBzZWxlY3RlZEl0ZW1zOiBBcnJheTxMaXN0SXRlbT47XHJcbiAgICBpc0Ryb3Bkb3duT3BlbjogYm9vbGVhbjtcclxuICAgIF9wbGFjZWhvbGRlcjogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBfc291cmNlRGF0YVR5cGU7XHJcbiAgICBwcml2YXRlIF9zb3VyY2VEYXRhRmllbGRzO1xyXG4gICAgZmlsdGVyOiBMaXN0SXRlbTtcclxuICAgIGRlZmF1bHRTZXR0aW5nczogSURyb3Bkb3duU2V0dGluZ3M7XHJcbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nO1xyXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XHJcbiAgICBzZXR0aW5nczogSURyb3Bkb3duU2V0dGluZ3M7XHJcbiAgICBkYXRhOiBBcnJheTxhbnk+O1xyXG4gICAgb25GaWx0ZXJDaGFuZ2U6IEV2ZW50RW1pdHRlcjxMaXN0SXRlbT47XHJcbiAgICBvbkRyb3BEb3duQ2xvc2U6IEV2ZW50RW1pdHRlcjxMaXN0SXRlbT47XHJcbiAgICBvblNlbGVjdDogRXZlbnRFbWl0dGVyPExpc3RJdGVtPjtcclxuICAgIG9uRGVTZWxlY3Q6IEV2ZW50RW1pdHRlcjxMaXN0SXRlbT47XHJcbiAgICBvblNlbGVjdEFsbDogRXZlbnRFbWl0dGVyPEFycmF5PExpc3RJdGVtPj47XHJcbiAgICBvbkRlU2VsZWN0QWxsOiBFdmVudEVtaXR0ZXI8QXJyYXk8TGlzdEl0ZW0+PjtcclxuICAgIHByaXZhdGUgb25Ub3VjaGVkQ2FsbGJhY2s7XHJcbiAgICBwcml2YXRlIG9uQ2hhbmdlQ2FsbGJhY2s7XHJcbiAgICBvbkZpbHRlclRleHRDaGFuZ2UoJGV2ZW50OiBhbnkpOiB2b2lkO1xyXG4gICAgY29uc3RydWN0b3IobGlzdEZpbHRlclBpcGU6IExpc3RGaWx0ZXJQaXBlLCBjZHI6IENoYW5nZURldGVjdG9yUmVmKTtcclxuICAgIG9uSXRlbUNsaWNrKCRldmVudDogYW55LCBpdGVtOiBMaXN0SXRlbSk6IGJvb2xlYW47XHJcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xyXG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcclxuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkO1xyXG4gICAgb25Ub3VjaGVkKCk6IHZvaWQ7XHJcbiAgICB0cmFja0J5Rm4oaW5kZXg6IGFueSwgaXRlbTogYW55KTogYW55O1xyXG4gICAgaXNTZWxlY3RlZChjbGlja2VkSXRlbTogTGlzdEl0ZW0pOiBib29sZWFuO1xyXG4gICAgaXNMaW1pdFNlbGVjdGlvblJlYWNoZWQoKTogYm9vbGVhbjtcclxuICAgIGlzQWxsSXRlbXNTZWxlY3RlZCgpOiBib29sZWFuO1xyXG4gICAgc2hvd0J1dHRvbigpOiBib29sZWFuO1xyXG4gICAgaXRlbVNob3dSZW1haW5pbmcoKTogbnVtYmVyO1xyXG4gICAgYWRkU2VsZWN0ZWQoaXRlbTogTGlzdEl0ZW0pOiB2b2lkO1xyXG4gICAgcmVtb3ZlU2VsZWN0ZWQoaXRlbVNlbDogTGlzdEl0ZW0pOiB2b2lkO1xyXG4gICAgZW1pdHRlZFZhbHVlKHZhbDogYW55KTogYW55O1xyXG4gICAgb2JqZWN0aWZ5KHZhbDogTGlzdEl0ZW0pOiB7fTtcclxuICAgIHByaXZhdGUgZGVvYmplY3RpZnk7XHJcbiAgICB0b2dnbGVEcm9wZG93bihldnQ6IGFueSk6IHZvaWQ7XHJcbiAgICBjbG9zZURyb3Bkb3duKCk6IHZvaWQ7XHJcbiAgICB0b2dnbGVTZWxlY3RBbGwoKTogYm9vbGVhbjtcclxuICAgIGdldEZpZWxkcyhpbnB1dERhdGE6IGFueSk6IGFueVtdO1xyXG59XHJcbiJdfQ==