{"version":3,"file":"module-map-ngfactory-loader.js","sources":["../src/module-map-ngfactory-loader.ts","../src/module-map-loader.module.ts","../module-map-ngfactory-loader_public_index.ts"],"names":[],"mappings":";;;;;;;;;;;AAqBA,MAAa,UAAU,GAA8B,IAAI,cAAc,CAAC,YAAY,CAAC;AAErF;AACC;AACC;AAEF,MAAa,wBAAwB;AAAI;AAAS;AAC7C;AAA6B;AAAS,IAAzC,YAAoB,QAAkB,EAA8B,SAAoB;AAAK,QAAzE,aAAQ,GAAR,QAAQ,CAAU;AAAE,QAA4B,cAAS,GAAT,SAAS,CAAW;AAAE,KAAG;AAE/F;AAAS;AAAsC;AAAoB;AAC3D,IADN,IAAI,CAAC,kBAA0B;AAAK;AAA0B,cACtD,WAAW,GAAG,IAAI,CAAC,QAAQ,YAAY,QAAQ;AACxD;AAA0B,cAAjB,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC;AAEnD,QAAI,IAAI,CAAC,IAAI,EAAE;AACd,YAAK,MAAM,IAAI,KAAK,CAAC,GAAG,kBAAkB,kCAAkC,CAAC,CAAC;AAC9E,SAAI;AAEL,QAAI,OAAO,WAAW;AACrB,YAAK,IAAI,CAAC,WAAW,oBAAwB,IAAI,GAAC,GAAG,IAAI,CAAC,cAAc,oBAAa,IAAI,GAAC,CAAC;AAC3F,KAAE;AAEH;AAAS;AAAiB;AAA2B;AAAoB;AAAS,IAAxE,WAAW,CAAC,OAA6B;AAAK,QACpD,OAAO,IAAI,OAAO;AAAO;AAG3B;AAAwB;AAAa,QAHhB,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAC,CAAC;AACnD,KAAE;AAEH;AAAS;AAAiB;AAAwB;AAAoB;AAClE,IADM,cAAc,CAAC,IAAe;AAAK,QACzC,OAAO,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;AACjD,KAAE;AACF;sDAvBA,UAAU;wIACR;AAAE;AAAoB;AACtB,YAdD,QAAQ;AACN,4CAauC,MAAM,SAAC,UAAU;AAAS;;;;;;kCAAE;AAAE;AAAE;AAAK;AAE9D;AAET;AAAK;AAAK;AAGC;AAAI;AAExB;AACe;AChBf,SAAgB,gBAAgB,CAAC,SAAoB;AAAK,IACxD,OAAO;AACR,QAAG,OAAO,EAAE,UAAU;AACtB,QAAG,QAAQ,EAAE,SAAS;AACtB,KAAE,CAAC;AACH,CAAA;AAED;AACC;AACC;AASF,MAAa,qBAAqB;AACjC;AACG;AAEF;AAAQ;AAEC;AAAoB;AAAS,IAAtC,OAAO,OAAO,CAAC,SAAoB;AAAK,QACtC,OAAO;AACV,YAAK,QAAQ,EAAE,qBAAqB;AACpC,YAAK,SAAS,EAAE;AAChB,gBAAO;AACP,oBAAS,OAAO,EAAE,UAAU;AAC5B,oBAAS,QAAQ,EAAE,SAAS;AAC5B,iBAAQ;AACR,aAAM;AACN,SAAI,CAAC;AACL,KAAE;AACF;mDAzBA,QAAQ,SAAC,mBACR,SAAS,EAAE;EACT,2BACE,OAAO,EAAE,qBAAqB,2BAC9B;OAAQ,EAAE,wBAAwB,uBACnC;OACF;YACF;;;;;;;;;;;;;;0BACK;AAAE;AAAE;AAAK;AAER;AAGP;AAAK;AACJ;AAAK;AAAmC;AAKzB;AAAK;AAAE;AAAK;AAE1B;AAKuF;AAAK;AC1D9F;AACC;AACC,GAAC;AAEH;AAAE;AAEiE","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Injectable,\n  NgModuleFactoryLoader,\n  InjectionToken,\n  NgModuleFactory,\n  Inject,\n  Type,\n  Compiler\n} from '@angular/core';\nimport {ModuleMap} from './module-map';\n\n/**\n * Token used by the ModuleMapNgFactoryLoader to load modules\n */\nexport const MODULE_MAP: InjectionToken<ModuleMap> = new InjectionToken('MODULE_MAP');\n\n/**\n * NgModuleFactoryLoader which does not lazy load\n */\n@Injectable()\nexport class ModuleMapNgFactoryLoader implements NgModuleFactoryLoader {\n  constructor(private compiler: Compiler, @Inject(MODULE_MAP) private moduleMap: ModuleMap) { }\n\n  load(loadChildrenString: string): Promise<NgModuleFactory<any>> {\n    const offlineMode = this.compiler instanceof Compiler;\n    const type = this.moduleMap[loadChildrenString];\n\n    if (!type) {\n      throw new Error(`${loadChildrenString} did not exist in the MODULE_MAP`);\n    }\n\n    return offlineMode ?\n      this.loadFactory(<NgModuleFactory<any>> type) : this.loadAndCompile(<Type<any>> type);\n  }\n\n  private loadFactory(factory: NgModuleFactory<any>): Promise<NgModuleFactory<any>> {\n    return new Promise(resolve => resolve(factory));\n  }\n\n  private loadAndCompile(type: Type<any>): Promise<NgModuleFactory<any>> {\n    return this.compiler.compileModuleAsync(type);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  NgModule,\n  NgModuleFactoryLoader,\n  ModuleWithProviders,\n  StaticProvider\n} from '@angular/core';\n\nimport { ModuleMapNgFactoryLoader, MODULE_MAP } from './module-map-ngfactory-loader';\nimport {ModuleMap} from './module-map';\n\n/**\n * Helper function for getting the providers object for the MODULE_MAP\n *\n * @param moduleMap Map to use as a value for MODULE_MAP\n */\nexport function provideModuleMap(moduleMap: ModuleMap): StaticProvider {\n  return {\n    provide: MODULE_MAP,\n    useValue: moduleMap\n  };\n}\n\n/**\n * Module for using a NgModuleFactoryLoader which does not lazy load\n */\n@NgModule({\n  providers: [\n    {\n      provide: NgModuleFactoryLoader,\n      useClass: ModuleMapNgFactoryLoader\n    }\n  ]\n})\nexport class ModuleMapLoaderModule {\n  /**\n   * Returns a ModuleMapLoaderModule along with a MODULE_MAP\n   *\n   * @param moduleMap Map to use as a value for MODULE_MAP\n   */\n  static withMap(moduleMap: ModuleMap): ModuleWithProviders {\n    return {\n      ngModule: ModuleMapLoaderModule,\n      providers: [\n        {\n          provide: MODULE_MAP,\n          useValue: moduleMap\n        }\n      ]\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {ModuleMap as Éµnguniversal_modules_module_map_ngfactory_loader_module_map_ngfactory_loader_a} from './src/module-map';"]}